name: Release

on:
  # Trigger the workflow on push or pull request,
  # but only for the main branch
  push:
    branches:
      - main
    paths-ignore:
      - 'CODEOWNERS'
      - '**.md'
      - '.**'

jobs:
  build:
    name: Create Release
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        id: checkout
        uses: actions/checkout@v2
        with:
          ref: 'main'
          fetch-depth: 0

      - name: Is major
        id: is_major
        if: ${{ contains(github.event.pull_request.labels.*.names√ü, 'release_major') }}
        run: |
          VERSION=$(git tag  | grep -E '^v[0-9]' | sort -V | tail -1)
          major=0
          minor=0
          patch=0
          regex="v([0-9]+).([0-9]+).([0-9]+)"
          if [[ $VERSION =~ $regex ]]; then
            major="${BASH_REMATCH[1]}"
            minor="${BASH_REMATCH[2]}"
            patch="${BASH_REMATCH[3]}"
          fi
          major=$(echo $major+1 | bc)
          NEXTVERSION="v${major}.${minor}.${patch}"
          echo "::set-output name=NEXTVERSION::$NEXTVERSION"

      - name: Is minor
        id: is_minor
        if: ${{ contains(github.event.pull_request.labels.*.names, 'release_minor') }}
        run: |
          VERSION=$(git tag  | grep -E '^v[0-9]' | sort -V | tail -1)
          major=0
          minor=0
          patch=0
          regex="v([0-9]+).([0-9]+).([0-9]+)"
          if [[ $VERSION =~ $regex ]]; then
            major="${BASH_REMATCH[1]}"
            minor="${BASH_REMATCH[2]}"
            patch="${BASH_REMATCH[3]}"
          fi
          minor=$(echo $minor+1 | bc)
          NEXTVERSION="v${major}.${minor}.${patch}"
          echo "::set-output name=NEXTVERSION::$NEXTVERSION"

      - name: Is patch
        id: is_patch
        if: ${{ contains(github.event.pull_request.labels.*.names, 'release_patch') }}
        run: |
          VERSION=$(git tag  | grep -E '^v[0-9]' | sort -V | tail -1)
          major=0
          minor=0
          patch=0
          regex="v([0-9]+).([0-9]+).([0-9]+)"
          if [[ $VERSION =~ $regex ]]; then
            major="${BASH_REMATCH[1]}"
            minor="${BASH_REMATCH[2]}"
            patch="${BASH_REMATCH[3]}"
          fi
          patch=$(echo $patch+1 | bc)
          NEXTVERSION="v${major}.${minor}.${patch}"
          echo "::set-output name=NEXTVERSION::$NEXTVERSION"

      - name: Get next version
        id: next_version
        env:
          NEXTVERSION_MAJOR: ${{ steps.is_major.outputs.NEXTVERSION }}
          NEXTVERSION_MINOR: ${{ steps.is_minor.outputs.NEXTVERSION }}
          NEXTVERSION_PATCH: ${{ steps.is_patch.outputs.NEXTVERSION }}
        run: |
          if [ -n "$NEXTVERSION_MAJOR" ]
          then
            NEXTVERSION=$NEXTVERSION_MAJOR
            echo "::set-output name=NEXTVERSION::$NEXTVERSION"
            exit 0
          fi

          if [ -n "$NEXTVERSION_MINOR" ]
          then
            NEXTVERSION=$NEXTVERSION_MINOR
            echo "::set-output name=NEXTVERSION::$NEXTVERSION"
            exit 0
          fi

          if [ -n "$NEXTVERSION_PATCH" ]
          then
            NEXTVERSION=$NEXTVERSION_PATCH
            echo "::set-output name=NEXTVERSION::$NEXTVERSION"
            exit 0
          fi
          
          # no label, patch
          VERSION=$(git tag  | grep -E '^v[0-9]' | sort -V | tail -1)
          NEXTVERSION=$(echo $VERSION | awk -F. -v OFS=. '{$NF++;print}')
          echo "::set-output name=NEXTVERSION::$NEXTVERSION"

      - name: Changelog
        id: changelog
        env:
          NEXTVERSION: ${{ steps.next_version.outputs.NEXTVERSION }}
        run: |
          npx auto-changelog --unreleased-only --latest-version $NEXTVERSION

      - name: Create Release
        id: create_release
        uses: actions/create-release@latest
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.next_version.outputs.NEXTVERSION }}
          release_name: ${{ steps.next_version.outputs.NEXTVERSION }}
          draft: false
          prerelease: false
          body_path: 'CHANGELOG.md'
